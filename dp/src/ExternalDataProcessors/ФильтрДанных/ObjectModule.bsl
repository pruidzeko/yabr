// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/yabr.1c/
// ----------------------------------------------------------

Перем МенеджерОбработкиДанных; // ВнешняяОбработкаОбъект - обработка-менеджер, вызвавшая данный обработчик
Перем Идентификатор;           // Строка                 - идентификатор обработчика, заданный обработкой-менеджером
Перем ПараметрыОбработки;      // Структура              - параметры обработки
Перем Лог;

Перем Условия;                 // Структура              - описания условий фильтра данных
Перем Данные;                  // Структура              - данные для фильтрации

Перем ВидыСравнения;           // Структура              - кэш возможных видов сравнения
Перем СловарьВидовСравнения;   // Соответствие           - кэш соответствия литералов видов сравнения
                               //                          и возможных видов сравнения

Перем РезультатыОбработки;	   // Массив(Структура)      - результаты обработки данных


#Область ПрограммныйИнтерфейс

// Функция - признак возможности обработки, принимать входящие данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может принимать входящие данные для обработки;
//	         Ложь - обработка не принимает входящие данные;
//
Функция ПринимаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ПринимаетДанные()

// Функция - признак возможности обработки, возвращать обработанные данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может возвращать обработанные данные;
//	         Ложь - обработка не возвращает данные;
//
Функция ВозвращаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВозвращаетДанные()

// Функция - возвращает список параметров обработки
// 
// Возвращаемое значение:
//	Структура                                - структура входящих параметров обработки
//      *Тип                    - Строка         - тип параметра
//      *Обязательный           - Булево         - Истина - параметр обязателен
//      *ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//      *Описание               - Строка         - описание параметра
//
Функция ОписаниеПараметров() Экспорт
	
	Параметры = Новый Структура();
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "Условия",
	                          "Структура",
	                          ,
	                          "Новый Структура()",
	                          "Описание условий фильтра данных.");
	    
	Возврат Параметры;
	
КонецФункции // ОписаниеПараметров()

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки данных
// 
// Возвращаемое значение:
//	Структура - параметры обработки данных
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
	Условия = Новый Структура;
	Если ПараметрыОбработки.Свойство("Условия") Тогда
		Условия = ПараметрыОбработки.Условия;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - Возвращает значение параметра обработки данных
// 
// Параметры:
//	ИмяПараметра      - Строка           - имя получаемого параметра
//
// Возвращаемое значение:
//	Произвольный      - значение параметра
//
Функция ПараметрОбработкиДанных(Знач ИмяПараметра) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОбработки[ИмяПараметра];
	
КонецФункции // ПараметрОбработкиДанных()

// Процедура - Устанавливает значение параметра обработки
//
// Параметры:
//	ИмяПараметра      - Строка           - имя устанавливаемого параметра
//	Значение          - Произвольный     - новое значение параметра
//
Процедура УстановитьПараметрОбработкиДанных(Знач ИмяПараметра, Знач Значение) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;
	
	ПараметрыОбработки.Вставить(ИмяПараметра, Значение);

	Если ВРег(ИмяПараметра) = ВРег("Условия") Тогда
		Условия = Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Данные = ВходящиеДанные;
	
КонецПроцедуры // УстановитьДанные()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	КоличествоНакопленныхДанных = 0;
	 
	Если ТипЗнч(РезультатыОбработки) = Тип("Массив") Тогда
		КоличествоНакопленныхДанных = РезультатыОбработки.Количество();
	КонецЕсли;

	Если НЕ ТипЗнч(РезультатыОбработки) = Тип("Массив") Тогда
		РезультатыОбработки = Новый Массив();
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из Данные Цикл
			Если УсловияВыполняются(Условия, ТекЭлемент) Тогда 
				РезультатыОбработки.Добавить(ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли УсловияВыполняются(Условия, Данные) Тогда
		РезультатыОбработки.Добавить(Данные);
	Иначе
		Возврат;
	КонецЕсли;

	Для й = КоличествоНакопленныхДанных По РезультатыОбработки.ВГраница() Цикл
		ПродолжениеОбработкиДанныхВызовМенеджера(РезультатыОбработки[й]);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатОбработки() Экспорт
	
	Возврат РезультатыОбработки;
	
КонецФункции // РезультатОбработки()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Лог.Информация("[%1]: Завершение обработки данных.", ТипЗнч(ЭтотОбъект));

	ЗавершениеОбработкиДанныхВызовМенеджера();
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

// Функция - возвращает значение поля последней записи, прошедшей фильтр
//
// Параметры:
//    Поле          - Строка     - имя поля записи
//
// Возвращаемое значение:
//    Произвольный     - значение поля последней записи, прошедшей фильтр
//
Функция ЗначениеПоляЗаписи(Знач Поле) Экспорт

	Если РезультатыОбработки.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон("Отсутствуют записи соответствующие условиям фильтра!");
	КонецЕсли;
	
	ПоследняяЗапись = РезультатыОбработки[РезультатыОбработки.ВГраница()];

	Если НЕ ПоследняяЗапись.Свойство(Поле) Тогда
		ВызватьИсключение СтрШаблон("Запись не содержит поля ""%1""!", Поле);
	КонецЕсли;
	
	Возврат ПоследняяЗапись[Поле];

КонецФункции // ЗначениеПоляЗаписи()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииПроверкиУсловийФильтрации

// Функция - проверяет выполнение условий фильтра для указанной записи
// 
// Параметры:
//     Условия        - Структура, Массив      - описание условий
//         [*Группа]         - Строка               - признак группы условий, возможны значения: "И", "ИЛИ"
//         [*Условия]        - Массив               - описание условий группы
//         [*ЛевоеЗначение]  - Произвольный         - левое значение, проверяемого логического выражения
//         [*ВидСравнения]   - Строка               - литерал вида сравнения ("=", "Больше", ВСписке и т.д.)
//         [*ПравоеЗначение] - Произвольный         - правое значение, проверяемого логического выражения
//     Запись         - Структура              - запись, проверяемая на соответствие условиям
//
// Возвращаемое значение:
//	Булево            - Истина - условия выполняются;
//	                    Ложь - в противном случае
//
Функция УсловияВыполняются(Знач Условия, Знач Запись)
	
	Если ТипЗнч(Условия) = Тип("Структура") Тогда
		Если Условия.Свойство("Группа") Тогда
			Группа = ВРег(Условия.Группа);
			Условия = Условия.Условия;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Условия) = Тип("Массив") Тогда
		Группа = "И";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Условия) = Тип("Структура") Тогда
		Возврат УсловиеВыполняется(Условия, Запись);
	КонецЕсли;
	
	Для Каждого ТекУсловие Из Условия Цикл
		ТекУсловиеИстинно = УсловияВыполняются(ТекУсловие, Запись); 
		Если Группа = "ИЛИ" И ТекУсловиеИстинно Тогда
			Возврат Истина;
		ИначеЕсли НЕ Группа = "ИЛИ" И НЕ ТекУсловиеИстинно Тогда
			Возврат Ложь;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если Группа = "ИЛИ" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // УсловияВыполняются()

// Функция - проверяет выполнение единичного условия фильтра для указанной записи
// 
// Параметры:
//     Условие        - Структура           - описание условия
//         [*ЛевоеЗначение]  - Произвольный     - левое значение, проверяемого логического выражения
//         [*ВидСравнения]   - Строка           - литерал вида сравнения ("=", "Больше", ВСписке и т.д.)
//         [*ПравоеЗначение] - Произвольный     - правое значение, проверяемого логического выражения
//     Запись         - Структура           - запись, проверяемая на соответствие условиям
//
// Возвращаемое значение:
//	Булево            - Истина - условие выполняются;
//	                    Ложь - в противном случае
//
Функция УсловиеВыполняется(Знач Условие, Знач Запись)
	
	ЛевоеЗначение = ВычислитьЗначениеДляПроверки(Условие.ЛевоеЗначение, Запись);
	
	ПравоеЗначение = Неопределено;
	Если Условие.Свойство("ПравоеЗначение") Тогда
		ПравоеЗначение = ВычислитьЗначениеДляПроверки(Условие.ПравоеЗначение, Запись);
	КонецЕсли;
	ТипПравогоЗначения = ТипЗнч(ПравоеЗначение);
	
	Если ВидСравнения(Условие.ВидСравнения, ВидыСравнения.Равно) Тогда
		Результат = (ЛевоеЗначение = ПравоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.НеРавно) Тогда
		Результат = НЕ (ЛевоеЗначение = ПравоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.Больше) Тогда
		Результат = (ЛевоеЗначение > ПравоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.БольшеРавно) Тогда
		Результат = (ЛевоеЗначение >= ПравоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.Меньше) Тогда
		Результат = (ЛевоеЗначение < ПравоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.МеньшеРавно) Тогда
		Результат = (ЛевоеЗначение <= ПравоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.ВСписке) И ТипПравогоЗначения = Тип("Массив") Тогда
		Результат = НЕ (ПравоеЗначение.Найти(ЛевоеЗначение) = Неопределено);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.НеВСписке) И ТипПравогоЗначения = Тип("Массив") Тогда
		Результат = (ПравоеЗначение.Найти(ЛевоеЗначение) = Неопределено);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.Содержит) И ТипПравогоЗначения = Тип("Строка") Тогда
		Результат = (Найти(ЛевоеЗначение, ПравоеЗначение) > 0);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.НеСодержит) И ТипПравогоЗначения = Тип("Строка") Тогда
		Результат = (Найти(ЛевоеЗначение, ПравоеЗначение) = 0);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.Заполнено) Тогда
		Результат = ЗначениеЗаполнено(ЛевоеЗначение);
	ИначеЕсли ВидСравнения(Условие.ВидСравнения, ВидыСравнения.НеЗаполнено) Тогда
		Результат = НЕ ЗначениеЗаполнено(ЛевоеЗначение);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УсловиеВыполняется()

// Функция - выполняет вычисление значения, если значение содержит поля записи 
// 
// Параметры:
//     Значение       - Строка, Массив     - вычисляемое значение
//     Запись         - Структура           - запись, проверяемая на соответствие условиям
//
// Возвращаемое значение:
//	Произвольный       - вычисленное значение или исходное значение, если вычисления не требовалось
//
Функция ВычислитьЗначениеДляПроверки(Знач Значение, Знач Запись)
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Результат = Новый Массив();
		
		Для Каждого ТекЗначение Из Значение Цикл
			Результат.Добавить(ВычислитьЗначениеДляПроверки(ТекЗначение, Запись));
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") И Лев(Значение, 1) = "&" Тогда
		Если Запись.Свойство(Сред(Значение, 2)) Тогда
			Результат = Запись[Сред(Значение, 2)];
		Иначе
			Результат = Неопределено;
		КонецЕсли;
	Иначе
		Результат = Значение;
	КонецЕсли;		
		
	Возврат Результат;
	
КонецФункции // ВычислитьЗначениеДляПроверки()

#КонецОбласти // ПроцедурыИФункцииОтправкиДанныхВЭластик

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанныхВызовМенеджера(Элемент)
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, Идентификатор);
	
КонецПроцедуры // ПродолжениеОбработкиДанныхВызовМенеджера()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанныхВызовМенеджера()
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(Идентификатор);
	
КонецПроцедуры // ЗавершениеОбработкиДанныхВызовМенеджера()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область СлужебныеПроцедурыИФункции

// Процедура - добавляет описание параметра обработки
// 
// Параметры:
//     ОписаниеПараметров     - Структура      - структура описаний параметров
//     Параметр               - Строка         - имя параметра
//     Тип                    - Строка         - список возможных типов параметра
//     Обязательный           - Булево         - Истина - параметр обязателен
//     ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//     Описание               - Строка         - описание параметра
//
Процедура ДобавитьОписаниеПараметра(ОписаниеПараметров
	                              , Параметр
	                              , Тип
	                              , Обязательный = Ложь
	                              , ЗначениеПоУмолчанию = Неопределено
	                              , Описание = "")
	
	Если НЕ ТипЗнч(ОписаниеПараметров) = Тип("Структура") Тогда
		ОписаниеПараметров = Новый Структура();
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура();
	ОписаниеПараметра.Вставить("Тип"                , Тип);
	ОписаниеПараметра.Вставить("Обязательный"       , Обязательный);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Описание"           , Описание);
	
	ОписаниеПараметров.Вставить(Параметр, ОписаниеПараметра);
	
КонецПроцедуры // ДобавитьОписаниеПараметра()

// Функция - проверяет, что литерал вида сравнения совпадает с указанным видом сравнения
// 
// Параметры:
//     ВидСравненияСтрокой  - Строка       - литерал вида сравнения ("=", "Больше", ВСписке и т.д.)
//     ВидСравнения         - Строка       - вид сравнения (Ключ структуры "ВидыСравнения")
//
// Возвращаемое значение:
//	Булево            - Истина - литерал вида сравнения совпадает с указанным видом сравнения;
//	                    Ложь - в противном случае
//
Функция ВидСравнения(ВидСравненияСтрокой, ВидСравнения)

	Возврат СловарьВидовСравнения.Получить(ВидСравненияСтрокой) = ВидСравнения;
	
КонецФункции // ВидСравнения()

// Процедура - заполняет служебные кэши видов сравнения
// и соответствия литералов видов сравнения возможным видам сравнения 
//
Процедура ЗаполнитьВидыСравнения()

	ВидыСравнения = Новый Структура();
	ВидыСравнения.Вставить("Равно"      , ВРег("Равно"));
	ВидыСравнения.Вставить("НеРавно"    , ВРег("НеРавно"));
	ВидыСравнения.Вставить("Больше"     , ВРег("Больше"));
	ВидыСравнения.Вставить("БольшеРавно", ВРег("БольшеРавно"));
	ВидыСравнения.Вставить("Меньше"     , ВРег("Меньше"));
	ВидыСравнения.Вставить("МеньшеРавно", ВРег("МеньшеРавно"));
	ВидыСравнения.Вставить("ВСписке"    , ВРег("ВСписке"));
	ВидыСравнения.Вставить("НеВСписке"  , ВРег("НеВСписке"));
	ВидыСравнения.Вставить("Содержит"   , ВРег("Содержит"));
	ВидыСравнения.Вставить("НеСодержит" , ВРег("НеСодержит"));
	ВидыСравнения.Вставить("Заполнено"  , ВРег("Заполнено"));
	ВидыСравнения.Вставить("НеЗаполнено", ВРег("НеЗаполнено"));
	
	СловарьВидовСравнения = Новый Соответствие();
	СловарьВидовСравнения.Вставить("Равно"      , ВидыСравнения.Равно);
	СловарьВидовСравнения.Вставить("="          , ВидыСравнения.Равно);
	СловарьВидовСравнения.Вставить("НеРавно"    , ВидыСравнения.НеРавно);
	СловарьВидовСравнения.Вставить("!="         , ВидыСравнения.НеРавно);
	СловарьВидовСравнения.Вставить("<>"         , ВидыСравнения.НеРавно);
	СловарьВидовСравнения.Вставить("Больше"     , ВидыСравнения.Больше);
	СловарьВидовСравнения.Вставить(">"          , ВидыСравнения.Больше);
	СловарьВидовСравнения.Вставить("БольшеРавно", ВидыСравнения.БольшеРавно);
	СловарьВидовСравнения.Вставить(">="         , ВидыСравнения.БольшеРавно);
	СловарьВидовСравнения.Вставить("Меньше"     , ВидыСравнения.Меньше);
	СловарьВидовСравнения.Вставить("<"          , ВидыСравнения.Меньше);
	СловарьВидовСравнения.Вставить("МеньшеРавно", ВидыСравнения.МеньшеРавно);
	СловарьВидовСравнения.Вставить("<="         , ВидыСравнения.МеньшеРавно);
	СловарьВидовСравнения.Вставить("ВСписке"    , ВидыСравнения.ВСписке);
	СловарьВидовСравнения.Вставить("В"          , ВидыСравнения.ВСписке);
	СловарьВидовСравнения.Вставить("НеВСписке"  , ВидыСравнения.НеВСписке);
	СловарьВидовСравнения.Вставить("!В"         , ВидыСравнения.НеВСписке);
	СловарьВидовСравнения.Вставить("Содержит"   , ВидыСравнения.Содержит);
	СловарьВидовСравнения.Вставить("НеСодержит" , ВидыСравнения.НеСодержит);
	СловарьВидовСравнения.Вставить("Заполнено"  , ВидыСравнения.Заполнено);
	СловарьВидовСравнения.Вставить("НеЗаполнено", ВидыСравнения.НеЗаполнено);

КонецПроцедуры // ЗаполнитьВидыСравнения()

// Функция - возвращает версию обработчика
// 
// Возвращаемое значение:
// 	Строка - версия обработчика
//
Функция Версия() Экспорт
	
	Возврат ЭтотОбъект.ПолучитьМакет("ВерсияОбработки").ПолучитьТекст();
	
КонецФункции // Версия()

#КонецОбласти // СлужебныеПроцедурыИФункции()

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  Менеджер	 - МенеджерОбработкиДанных    - менеджер обработки данных - владелец
// 
Процедура ПриСозданииОбъекта(Менеджер) Экспорт

	УстановитьМенеджерОбработкиДанных(Менеджер);
	
	Лог = МенеджерОбработкиДанных.Лог();
	
	ЗаполнитьВидыСравнения();
	
	Лог.Информация("[%1]: Инициализирован обработчик", ТипЗнч(ЭтотОбъект));
	
КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // ОбработчикиСобытий
