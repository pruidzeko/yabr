// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/yabr.1c/
// ----------------------------------------------------------

#Область ОбработчикиЭлементовФормы

// Процедура - обработка начала выбора файла
//
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Скобкофайл (*.*)|*.*";
	Диалог.Заголовок = "Скобкофайл";

	ЗавершениеВыбораФайла = Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтаФорма);
	
	Диалог.Показать(ЗавершениеВыбораФайла);
	
КонецПроцедуры // ПутьКФайлуНачалоВыбора()

// Процедура - продолжение обработки выбора файла
//
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	
КонецПроцедуры // ПутьКФайлуНачалоВыбораЗавершение()

#КонецОбласти // ОбработчикиЭлементовФормы

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Прочитать" на сервере
//
// Параметры:
// 	АдресДанных    - Строка    - адрес хранилища двоичных данных для обработки
//
&НаСервере
Процедура ПрочитатьНаСервере(АдресДанных)
	
	ВремУровниЗаписей = СтрРазделить(УровниЗаписей, ";");
	Для й = 0 По ВремУровниЗаписей.ВГраница() Цикл
		ВремУровниЗаписей[й] = Число(ВремУровниЗаписей[й]);
	КонецЦикла;

	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("НачальнаяСтрока"                , НачальнаяСтрока);
	ПараметрыОбработки.Вставить("УровниЗаписей"                  , ВремУровниЗаписей);
	ПараметрыОбработки.Вставить("ЗапоминатьНомераСтрок"          , Ложь);
	ПараметрыОбработки.Вставить("ЧастотаЗамераСкоростиВыполнения", ЧастотаЗамераСкоростиВыполнения);

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.УстановитьПараметрыОбработкиДанных(ПараметрыОбработки);
	
	ОбработкаОбъект.УстановитьДанные(АдресДанных);

	ОбработкаОбъект.ОбработатьДанные();
	
	РезультатОбработки = ОбработкаОбъект.РезультатОбработки();
	
	УдалитьДанныеНесовместимыеСJSON(РезультатОбработки);
	
	РезультатЧтения.УстановитьТекст(ЗаписатьДанныеВJSON(РезультатОбработки));
	
	Если ЧастотаЗамераСкоростиВыполнения > 0 Тогда
		РезультатЧтения.ДобавитьСтроку(Символы.ПС + ЗаписатьДанныеВJSON(ОбработкаОбъект.ЗамерСкоростиВыполнения()));
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьНаСервере()

// Процедура - обработчик команды "Прочитать"
//
&НаКлиенте
Процедура Прочитать(Команда)
	
	Данные = Новый ДвоичныеДанные(ПутьКФайлу);
	
	ПрочитатьНаСервере(ПоместитьВоВременноеХранилище(Данные, ЭтотОбъект.УникальныйИдентификатор));
	
КонецПроцедуры // Прочитать()

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

// Процедура - удаляет из состава структуры циклические ссылки и соответствия номеров строк
// 
// Параметры:
// 	Данные    - Структура    - даныые для обработки
//
&НаСервере
Процедура УдалитьДанныеНесовместимыеСJSON(Данные)

	Если НЕ ТипЗнч(Данные) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если Данные.Свойство("Родитель") Тогда
		Данные.Удалить("Родитель");
	КонецЕсли;
	
	Если Данные.Свойство("НомераСтрок") Тогда
		Данные.Удалить("НомераСтрок");
	КонецЕсли;
		
	Если Данные.Свойство("Значения") И ТипЗнч(Данные.Значения) = Тип("Массив") Тогда
		Для Каждого ТекЭлемент Из Данные.Значения Цикл
			УдалитьДанныеНесовместимыеСJSON(ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УдалитьДанныеНесовместимыеСJSON()

// Функция - возвращает представление данных в текстовом формате JSON
//
// Параметры:
//  Данные	 - Структура, Массив(Структура)	 - данные для преобразования
// 
// Возвращаемое значение:
//  Строка - представление данных в текстовом формате JSON
//
&НаСервере
Функция ЗаписатьДанныеВJSON(Знач Данные)
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(Запись, Данные, НастройкиСериализации);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Запись.Закрыть();
	
КонецФункции // ЗаписатьДанныеВJSON()

#КонецОбласти // СлужебныеПроцедурыИФункции
