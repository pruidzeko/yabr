// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/yabr.1c/
// ----------------------------------------------------------

Перем МенеджерОбработкиДанных; // ВнешняяОбработкаОбъект - обработка-менеджер, вызвавшая данный обработчик
Перем Идентификатор;           // Строка                 - идентификатор обработчика, заданный обработкой-менеджером
Перем ПараметрыОбработки;      // Структура              - параметры обработки
Перем Лог;

Перем УровеньЭлементов;        // Число                  - номер уровня элементов в структуре данных,
                               //                          которые будут прочитаны и обработаны
Перем ИндексЭлементаРодителя;  // Число                  - индекс родительского элемента в структуре данных,
                               //                          подчиненные элементы которого будут прочитаны и обработаны
Перем ВыгружатьКолонки;        // Структура              - Содержит список колонок с указанием необходимости их выгрузки
		// *__ПоУмолчанию         Булево                 - Истина - если для колонок не указан флаг выгрузки, то они будут выгружены
		//                                               - Ложь - если для колонок не указан флаг выгрузки, то они не будут выгружены
		// *<Имя колонки>         Булево                 - Истина - колонка будет выгружена
		//                                               - Ложь - колонка не будет выгружена
Перем РазмерПорцииОбработки;   // Число                  - количество записей, которое будет прочитано
                               //                          прежде чем они будут переданы на дальнейшую обработку
Перем Словари;				   // Структура              - словари журнала регистрации 1С
Перем ИнформационнаяБаза;      // Строка                 - имя информационной базы, чей журнал обрабатывается
Перем Данные;                  // Структура              - результаты чтения скобочного формата 1С
Перем НакопленныеДанные;	   // Массив(Структура)      - результаты обработки данных

Перем ИмяФайлаЖурнала;         // Строка                 - имя обрабатываемого файла журнала 1С

#Область ПрограммныйИнтерфейс

// Функция - признак возможности обработки, принимать входящие данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может принимать входящие данные для обработки;
//	         Ложь - обработка не принимает входящие данные;
//
Функция ПринимаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ПринимаетДанные()

// Функция - признак возможности обработки, возвращать обработанные данные
// 
// Возвращаемое значение:
//	Булево - Истина - обработка может возвращать обработанные данные;
//	         Ложь - обработка не возвращает данные;
//
Функция ВозвращаетДанные() Экспорт
	
	Возврат Истина;
	
КонецФункции // ВозвращаетДанные()

// Функция - возвращает список параметров обработки
// 
// Возвращаемое значение:
//	Структура                                - структура входящих параметров обработки
//      *Тип                    - Строка         - тип параметра
//      *Обязательный           - Булево         - Истина - параметр обязателен
//      *ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//      *Описание               - Строка         - описание параметра
//
Функция ОписаниеПараметров() Экспорт
	
	Параметры = Новый Структура();
	
	ДобавитьОписаниеПараметра(Параметры,
	                          "Словари",
	                          "Структура",
	                          ,
	                          "Новый Структура()",
	                          "Словари данных журнала регистрации 1С.");
	ДобавитьОписаниеПараметра(Параметры,
	                          "УровеньЭлементов",
	                          "Число",
	                          ,
	                          1,
	                          "Номер уровня элементов в структуре данных, которые будут прочитаны и обработаны.");
	ДобавитьОписаниеПараметра(Параметры,
	                          "ИндексЭлементаРодителя",
	                          "Число",
	                          ,
	                          0,
	                          "Индекс родительского элемента в структуре данных,
                               |подчиненные элементы которого будут прочитаны и обработаны.");
	ДобавитьОписаниеПараметра(Параметры,
							   "ВыгружатьКолонки",
							   "Структура",
							   ,
							   "Новый Структура()",
							   "Содержит список колонок с указанием необходимости их выгрузки.");
	ДобавитьОписаниеПараметра(Параметры,
	                          "РазмерПорцииОбработки",
	                          "Число",
	                          ,
	                          1,
	                          "Количество записей, которое будет прочитано
                              |прежде чем они будут переданы на дальнейшую обработку.");
	ДобавитьОписаниеПараметра(Параметры,
	                          "ИмяФайлаЖурнала",
	                          "Строка",
	                          ,
	                          "",
	                          "Имя обрабатываемого файла журнала регистрации.");
	ДобавитьОписаниеПараметра(Параметры,
	                          "ИнформационнаяБаза",
	                          "Структура, Строка",
	                          ,
	                          "",
	                          "Описание или имя информационной базы, чей журнал обрабатывается.");
		    
	Возврат Параметры;
	
КонецФункции // ОписаниеПараметров()

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки данных
// 
// Возвращаемое значение:
//	Структура - параметры обработки данных
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;

	Для Каждого ТекЭлемент Из НовыеПараметры Цикл
		Если ВРег(ТекЭлемент.Ключ) = ВРег("Словари") И ТипЗнч(ТекЭлемент.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОбработки.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;

	Если НЕ ТипЗнч(Словари) = Тип("Структура") Тогда
		Словари = Новый Структура();
	КонецЕсли;

	Если НовыеПараметры.Свойство("Словари") Тогда
		Для Каждого ТекЭлемент Из НовыеПараметры.Словари Цикл
			Словари.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
		ПараметрыОбработки.Вставить("Словари", Словари);
	КонецЕсли;
	
	УровеньЭлементов = 1;
	Если ПараметрыОбработки.Свойство("УровеньЭлементов") Тогда
		УровеньЭлементов = ПараметрыОбработки.УровеньЭлементов;
	КонецЕсли;
	
	ИндексЭлементаРодителя = 0;
	Если ПараметрыОбработки.Свойство("НомерЭлементаРодителя") Тогда
		ИндексЭлементаРодителя = ПараметрыОбработки.НомерЭлементаРодителя;
	КонецЕсли;
	
	ВыгружатьКолонки = Новый Структура();
	ВыгружатьКолонки.Вставить("__ПоУмолчанию", Истина);
	Если НовыеПараметры.Свойство("ВыгружатьКолонки") Тогда
		Для Каждого ТекЭлемент Из НовыеПараметры.ВыгружатьКолонки Цикл
			ВыгружатьКолонки.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
		ПараметрыОбработки.Вставить("ВыгружатьКолонки", ВыгружатьКолонки);
	КонецЕсли;
	
	РазмерПорцииОбработки = 0;
	Если ПараметрыОбработки.Свойство("РазмерПорцииОбработки") Тогда
		РазмерПорцииОбработки = ПараметрыОбработки.РазмерПорцииОбработки;
	КонецЕсли;
	
	ИнформационнаяБаза = "";
	Если ПараметрыОбработки.Свойство("ИнформационнаяБаза") Тогда
		Если ТипЗнч(ПараметрыОбработки.ИнформационнаяБаза) = Тип("Структура") Тогда
			ИнформационнаяБаза = ПараметрыОбработки.ИнформационнаяБаза.Имя;
		Иначе
			ИнформационнаяБаза = ПараметрыОбработки.ИнформационнаяБаза;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФайлаЖурнала = "";
	Если ПараметрыОбработки.Свойство("ИмяФайлаЖурнала") Тогда
		ИмяФайлаЖурнала = ПараметрыОбработки.ИмяФайлаЖурнала;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - Возвращает значение параметра обработки данных
// 
// Параметры:
//	ИмяПараметра      - Строка           - имя получаемого параметра
//
// Возвращаемое значение:
//	Произвольный      - значение параметра
//
Функция ПараметрОбработкиДанных(Знач ИмяПараметра) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыОбработки.Свойство(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыОбработки[ИмяПараметра];
	
КонецФункции // ПараметрОбработкиДанных()

// Процедура - Устанавливает значение параметра обработки
//
// Параметры:
//	ИмяПараметра      - Строка           - имя устанавливаемого параметра
//	Значение          - Произвольный     - новое значение параметра
//
Процедура УстановитьПараметрОбработкиДанных(Знач ИмяПараметра, Знач Значение) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = Новый Структура();
	КонецЕсли;
	
	Если НЕ ВРег(ИмяПараметра) = ВРег("Словари") И ТипЗнч(Значение) = Тип("Структура") Тогда
		ПараметрыОбработки.Вставить(ИмяПараметра, Значение);
	КонецЕсли;

	Если ВРег(ИмяПараметра) = ВРег("Словари") И ТипЗнч(Значение) = Тип("Структура") Тогда
		Если НЕ ТипЗнч(Словари) = Тип("Структура") Тогда
			Словари = Новый Структура();
		КонецЕсли;
	
		Для Каждого ТекЭлемент Из Значение Цикл
			Словари.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
		ПараметрыОбработки.Вставить(ИмяПараметра, Словари);
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("УровеньЭлементов") Тогда
		УровеньЭлементов = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("НомерЭлементаРодителя") Тогда
		ИндексЭлементаРодителя = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВыгружатьКолонки") Тогда
		Для Каждого ТекЭлемент Из Значение Цикл
			ВыгружатьКолонки.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
		ПараметрыОбработки.Вставить(ИмяПараметра, ВыгружатьКолонки);
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("РазмерПорцииОбработки") Тогда
		РазмерПорцииОбработки = Значение;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИнформационнаяБаза") Тогда
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ИнформационнаяБаза = Значение.Имя;
		Иначе
			ИнформационнаяБаза = Значение;
		КонецЕсли;
	ИначеЕсли ВРег(ИмяПараметра) = ВРег("ИмяФайлаЖурнала") Тогда
		ИмяФайлаЖурнала = Значение;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Данные = ВходящиеДанные;
	
КонецПроцедуры // УстановитьДанные()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	Если НЕ ДобавитьЗапись(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	Если НакопленныеДанные.Количество() >= РазмерПорцииОбработки Тогда
		ПродолжениеОбработкиДанныхВызовМенеджера(НакопленныеДанные);
		НакопленныеДанные = Новый Массив();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатОбработки() Экспорт
	
	Возврат НакопленныеДанные;
	
КонецФункции // РезультатОбработки()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Если ТипЗнч(НакопленныеДанные) = Тип("Массив") И НакопленныеДанные.Количество() > 0 Тогда
		ПродолжениеОбработкиДанныхВызовМенеджера(НакопленныеДанные);
		НакопленныеДанные = Новый Массив();
	КонецЕсли;
	
	Лог.Информация("[%1]: Завершение обработки данных журнала регистрации ""%2""",
	               ТипЗнч(ЭтотОбъект),
	               ИмяФайлаЖурнала);

	ЗавершениеОбработкиДанныхВызовМенеджера();
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбработкаДанных

// Функция - преобразует переданный элемент из общего формата разбора скобкофайла
// в структуру описания записи журнала регистрации
//
// Параметры:
//	Элемент         - Структура             - обрабатываемый элемент
//		*Родитель       - Структура             - ссылка на элемент-родитель
//		*Уровень        - Число                 - уровень иерархии элемента
//		*Индекс         - Число                 - индекс элемента в массиве значений родителя
//		*НомераСтрок    - Соответсвие(Число)    - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока      - Число                 - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока      - Число                 - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения       - Массив(Структура)     - массив дочерних элементов
//
// Возвращаемое значение:
//	Структура      - описание записи журнала регистрации
//
Функция РазобратьЭлемент(Элемент)
	
	Запись = Новый Структура();
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ИмяФайла",
								   ИмяФайлаЖурнала);
	ДобавитьЗначениеКолонкиВЗапись(Запись,
	                               "ИнформационнаяБаза",
	                               ИнформационнаяБаза);
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "НомерСтроки",
								   Элемент.НачСтрока);
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Время",
								   Дата(Элемент.Значения[0]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "СтатусТранзакции",
								   ПолучитьЗначениеИзСловаря("СтатусыТранзакций", Элемент.Значения[1]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ВремяТранзакции",
								   Строка16ВЧисло10(Элемент.Значения[2].Значения[0]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "НомерТранзакции",
								   Строка16ВЧисло10(Элемент.Значения[2].Значения[1]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Пользователь",
								   ПолучитьЗначениеИзСловаря("Пользователи", Число(Элемент.Значения[3])));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Компьютер",
								   ПолучитьЗначениеИзСловаря("Компьютеры", Число(Элемент.Значения[4])));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Приложение",
								   ПолучитьЗначениеИзСловаря("Приложения", Число(Элемент.Значения[5])));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Соединение",
								   Число(Элемент.Значения[6]));

	Событие = ПолучитьЗначениеИзСловаря("События", Число(Элемент.Значения[7]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Событие",
								   Событие);
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ПредставлениеСобытия",
								   ПолучитьЗначениеИзСловаря("ПредставленияСобытий", Событие));
	
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Важность",
								   ПолучитьЗначениеИзСловаря("Уровни", Элемент.Значения[8]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Комментарий",
								   ОбработатьКавычкиВСтроке(Элемент.Значения[9]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Метаданные",
								   ПолучитьЗначениеИзСловаря("Метаданные", Число(Элемент.Значения[10])));

	ВремДанные = Элемент.Значения[11].Значения;
	ТипДанных = ОбработатьКавычкиВСтроке(ВремДанные[0]);
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ТипДанных",
								   ТипДанных);
	
	ДанныеДляЗаписи = Новый Массив();
	Если ВремДанные.Количество() > 1 Тогда
		Если ТипЗнч(ВремДанные[1]) = Тип("Структура") И ТипДанных = "P" Тогда
			Для й = 1 По ВремДанные[1].Значения.ВГраница() Цикл
				ДанныеДляЗаписи.Добавить(ОбработатьКавычкиВСтроке(ВремДанные[1].Значения[й].Значения[1]));
			КонецЦикла;
		Иначе
			ДанныеДляЗаписи.Добавить(ОбработатьКавычкиВСтроке(ВремДанные[1]));
		КонецЕсли;
	КонецЕсли;
	ДобавитьЗначениеКолонкиВЗапись(Запись,
	                               "Данные",
	                               ДанныеДляЗаписи);

	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ПредставлениеДанных",
								   ОбработатьКавычкиВСтроке(Элемент.Значения[12]));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Сервер",
								   ПолучитьЗначениеИзСловаря("Серверы", Число(Элемент.Значения[13])));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ОсновнойПорт",
								   ПолучитьЗначениеИзСловаря("ОсновныеПорты", Число(Элемент.Значения[14])));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "ВспомогательныйПорт",
								   ПолучитьЗначениеИзСловаря("ВспомогательныеПорты", Число(Элемент.Значения[15])));
	ДобавитьЗначениеКолонкиВЗапись(Запись,
								   "Сеанс",
								   Число(Элемент.Значения[16]));
	Возврат Запись;

КонецФункции // РазобратьЭлемент()

// Процедура - добавляет колонку с указанным значением в соответствии с настройками обработки
//
// Параметры:
//	Запись      - Структура      - запись для добавления значения
//	Колонка     - Строка         - имя колонки
//	Значение    - Произвольный   - добавляемое значение
//
Процедура ДобавитьЗначениеКолонкиВЗапись(Запись, Знач Колонка, Знач Значение)

	Если НЕ ТипЗнч(Запись) = Тип("Структура") Тогда
		Запись = Новый Структура();
	КонецЕсли;

	Если ВыгружатьКолонку(Колонка) Тогда
		Запись.Вставить(Колонка, Значение);
	КонецЕсли;

КонецПроцедуры // ДобавитьЗначениеКолонкиВЗапись()

// Функция - проверяет, что указанная колонка должна быть добавлена в результирующую запись
// в соответствии с настройкой обработки
//
// Параметры:
//	Колонка     - Строка         - имя добавляемой колонки
//
// Возвращаемое значение:
//	Булево      - Истина - колонка должна быть добавлена;
//	              Ложь - в противном случае
//
Функция ВыгружатьКолонку(Знач Колонка)

	Если ВыгружатьКолонки.Свойство(Колонка) Тогда
		Возврат ВыгружатьКолонки[Колонка];
	ИначеЕсли ВыгружатьКолонки.Свойство("__ПоУмолчанию") Тогда
		Возврат ВыгружатьКолонки.__ПоУмолчанию;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ВыгружатьКолонку()

// Процедура - проверяет, что элемент является записью журнала регистрации
// и добавляет его в массив записей
//
// Параметры:
//	Элемент         - Структура                     - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
Функция ДобавитьЗапись(Элемент) Экспорт
	
	Если НЕ Элемент.Уровень = УровеньЭлементов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Элемент.Родитель.Индекс = ИндексЭлементаРодителя Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запись = РазобратьЭлемент(Элемент);
	
	Если НЕ ТипЗнч(НакопленныеДанные) = Тип("Массив") Тогда
		НакопленныеДанные = Новый Массив();
	КонецЕсли;
	
	НакопленныеДанные.Добавить(Запись);
	
	Возврат Истина;
	
КонецФункции // ДобавитьЗапись()

#КонецОбласти // ОбработкаДанных

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанныхВызовМенеджера(Элемент)
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, Идентификатор);
	
КонецПроцедуры // ПродолжениеОбработкиДанныхВызовМенеджера()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанныхВызовМенеджера()
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(Идентификатор);
	
КонецПроцедуры // ЗавершениеОбработкиДанныхВызовМенеджера()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область СлужебныеПроцедурыИФункции

// Процедура - добавляет описание параметра обработки
// 
// Параметры:
//     ОписаниеПараметров     - Структура      - структура описаний параметров
//     Параметр               - Строка         - имя параметра
//     Тип                    - Строка         - список возможных типов параметра
//     Обязательный           - Булево         - Истина - параметр обязателен
//     ЗначениеПоУмолчанию    - Произвольный   - значение параметра по умолчанию
//     Описание               - Строка         - описание параметра
//
Процедура ДобавитьОписаниеПараметра(ОписаниеПараметров
	                              , Параметр
	                              , Тип
	                              , Обязательный = Ложь
	                              , ЗначениеПоУмолчанию = Неопределено
	                              , Описание = "")
	
	Если НЕ ТипЗнч(ОписаниеПараметров) = Тип("Структура") Тогда
		ОписаниеПараметров = Новый Структура();
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура();
	ОписаниеПараметра.Вставить("Тип"                , Тип);
	ОписаниеПараметра.Вставить("Обязательный"       , Обязательный);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	ОписаниеПараметра.Вставить("Описание"           , Описание);
	
	ОписаниеПараметров.Вставить(Параметр, ОписаниеПараметра);
	
КонецПроцедуры // ДобавитьОписаниеПараметра()

// Функция - читает указанный макет JSON и возвращает содержимое в виде структуры/массива
//
// Параметры:
//	ИмяМакета    - Строка   - имя макета (файла) json
//
// Возвращаемое значение:
//	Структура, Массив       - прочитанные данные из макета 
//
Функция ПрочитатьДанныеИзМакетаJSON(ИмяМакета)

	Чтение = Новый ЧтениеJSON();
	
	Чтение.УстановитьСтроку(ЭтотОбъект.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
	
	Возврат ПрочитатьJSON(Чтение, Ложь);

КонецФункции // ПрочитатьДанныеИзМакетаJSON()

// Процедура - читает служебные словари из макетов
// Статусы транзакций, Уровни журнала, Виды событий журнала, Список колонок журнала
//
Процедура ЗаполнитьСлужебныеСловари()

	Если НЕ ТипЗнч(Словари) = Тип("Структура") Тогда
		Словари = Новый Структура();
	КонецЕсли;

	// Статусы транзакций
	ДанныеСловаря = Новый Соответствие();
	ДанныеМакета = ПрочитатьДанныеИзМакетаJSON("СтатусыТранзакцийЖР");
	Для Каждого ТекЭлемент Из ДанныеМакета Цикл
		ДанныеСловаря.Вставить(ТекЭлемент.Ид, ТекЭлемент.Представление);
	КонецЦикла;
	Словари.Вставить("СтатусыТранзакций", ДанныеСловаря);

	// Уровни записей
	ДанныеСловаря = Новый Соответствие();
	ДанныеМакета = ПрочитатьДанныеИзМакетаJSON("УровниЖР");
	Для Каждого ТекЭлемент Из ДанныеМакета Цикл
		ДанныеСловаря.Вставить(ТекЭлемент.Ид, ТекЭлемент.Представление);
	КонецЦикла;
	Словари.Вставить("Уровни", ДанныеСловаря);

	// События
	ДанныеСловаря = Новый Соответствие();
	ДанныеМакета = ПрочитатьДанныеИзМакетаJSON("СобытияЖР");
	Для Каждого ТекЭлемент1 Из ДанныеМакета Цикл
		ДанныеСловаря.Вставить(ТекЭлемент1.Ид, ТекЭлемент1.Представление);

		Если ТекЭлемент1.Свойство("События") Тогда
			Для Каждого ТекЭлемент2 Из ТекЭлемент1.События Цикл
				ДанныеСловаря.Вставить(СтрШаблон("%1.%2", ТекЭлемент1.Ид, ТекЭлемент2.Ид),
				                       СтрШаблон("%1.%2", ТекЭлемент1.Представление, ТекЭлемент2.Представление));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Словари.Вставить("ПредставленияСобытий", ДанныеСловаря);

	// Колонки
	ДанныеСловаря = Новый Соответствие();
	ДанныеМакета = ПрочитатьДанныеИзМакетаJSON("КолонкиЖР");
	Для Каждого ТекЭлемент Из ДанныеМакета Цикл
		ДанныеСловаря.Вставить(ТекЭлемент.Ид, ТекЭлемент.Ид);
	КонецЦикла;
	Словари.Вставить("Колонки", ДанныеСловаря);

КонецПроцедуры // ЗаполнитьСлужебныеСловари()

// Функция - получает представление элемента словаря журнала регистрации по индексу
//
// Параметры:
//	Словарь      - Строка       - имя словаря журнала регистрации (Пользователи, Компьютеры и пр.)
//	Индекс       - Число        - индекс элемента в словаре
//
// Возвращаемое значение:
//	Строка      - представление элемента словаря журнала регистрации 
//
Функция ПолучитьЗначениеИзСловаря(Знач Словарь, Знач Индекс)
	
	Если НЕ Словари.Свойство(Словарь) Тогда
		Возврат "";
	КонецЕсли;

	ЗначениеВСловаре = Словари[Словарь].Получить(Индекс);
	
	Если ЗначениеВСловаре = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ЗначениеВСловаре;

КонецФункции // ПолучитьЗначениеИзСловаря()

// Преобразует переданное строковое представление 16-ричного числа в десятичное число
// 
// Параметры 
// 	ПарамHEX          	 -	Строка                 	 Строковое представление 16-ричного числа для преобразования
//
// Возвращаемое значение:
// 	Возврат ...        	 -	Число                 	 Десятичное число
//
Функция Строка16ВЧисло10(Строка16) Экспорт

	Если НЕ ТипЗнч(Строка16) = Тип("Строка") Тогда
		Возврат 0;
	КонецЕсли;

	Для й = 1 По СтрДлина(Строка16) Цикл
		Если Найти("0123456789abcdef", НРег(Сред(Строка16, й, 1))) = 0 Тогда
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	СмещениеКодаСимволов = 87;

	ВремЧисло = 0;
	Для й = 1 По СтрДлина(Строка16) Цикл
		ТекЦифра = Сред(Строка16, й, 1);
		ВремЧисло = ВремЧисло
			      + Pow(16, СтрДлина(Строка16) - й)
			      * ?(Найти("abcdef", НРег(ТекЦифра)) = 0, Число(ТекЦифра), КодСимвола(НРег(ТекЦифра)) - СмещениеКодаСимволов);
	КонецЦикла;
	
	Возврат ВремЧисло;
	
КонецФункции // Строка16ВЧисло10()

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""", """");
	
	Если Лев(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

// Функция - возвращает версию обработчика
// 
// Возвращаемое значение:
// 	Строка - версия обработчика
//
Функция Версия() Экспорт
	
	Возврат ЭтотОбъект.ПолучитьМакет("ВерсияОбработки").ПолучитьТекст();
	
КонецФункции // Версия()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  Менеджер	 - МенеджерОбработкиДанных    - менеджер обработки данных - владелец
// 
Процедура ПриСозданииОбъекта(Менеджер) Экспорт

	УстановитьМенеджерОбработкиДанных(Менеджер);

	Лог = МенеджерОбработкиДанных.Лог();
	
	ЗаполнитьСлужебныеСловари();
	
	Лог.Информация("[%1]: Инициализирован обработчик", ТипЗнч(ЭтотОбъект));

КонецПроцедуры // ПриСозданииОбъекта()

#КонецОбласти // ОбработчикиСобытий
